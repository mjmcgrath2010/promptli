{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport _ from 'lodash';\nconst {\n  API_BASE_URL\n} = process.env;\nconst API = {\n  token() {\n    return Cookies.get('token');\n  },\n\n  get(resource, config = {}) {\n    return axios(_objectSpread({}, {\n      method: 'get',\n      url: `${API_BASE_URL}/${resource}`,\n      headers: {\n        Authorization: `JWT ${this.token()}`,\n        'Content-Type': 'application/json'\n      }\n    }, config));\n  },\n\n  post(resource, payload, config = {}) {\n    return axios(_objectSpread({}, {\n      method: 'post',\n      url: `${API_BASE_URL}/${resource}`,\n      headers: {\n        Authorization: `JWT ${this.token()}`,\n        'Content-Type': 'application/json'\n      },\n      data: payload\n    }, config));\n  },\n\n  update(resource, payload, id, config = {}) {\n    return axios(_objectSpread({}, {\n      method: 'put',\n      url: `${API_BASE_URL}/${resource}/${id}`,\n      headers: {\n        Authorization: `JWT ${this.token()}`,\n        'Content-Type': 'application/json'\n      },\n      data: payload\n    }, config));\n  },\n\n  getTableData(resource, headersArray) {\n    return this.get(resource).then(response => {\n      const {\n        data\n      } = response;\n\n      let headers = headersArray || _Object$keys(data[0]);\n\n      headers = headers.map(header => ({\n        field: header,\n        title: _.startCase(header.toUpperCase()),\n        type: this.getDataType(data[0][header])\n      }));\n      return new _Promise(resolve => resolve({\n        columns: data,\n        headers\n      }));\n    }).catch(e => new _Promise((resolve, reject) => reject('Something went wrong')));\n  },\n\n  authenticate({\n    email,\n    password\n  }) {\n    return this.post('auth', {\n      email,\n      password\n    });\n  },\n\n  logout() {\n    return this.get('auth/logout');\n  },\n\n  checkAuth() {\n    return this.get('auth/check-auth');\n  },\n\n  connectGoogleAccount(payload) {\n    return this.post('oauth/google/connect', payload);\n  },\n\n  forgotPassword(payload) {\n    return this.post('auth/forgot-password', payload);\n  },\n\n  resetPassword(payload) {\n    return this.post('auth/reset-password', payload);\n  },\n\n  createUser({\n    email,\n    password,\n    name\n  }) {\n    return this.post('user', {\n      email,\n      password,\n      name\n    });\n  },\n\n  initDashboard() {\n    return this.get('dashboard');\n  },\n\n  fetchProfile() {\n    return this.get('dashboard/me');\n  },\n\n  updateUser(id, payload) {\n    return this.update('user', payload, id);\n  },\n\n  updateAccount(id, payload) {\n    return this.update('account', payload, id);\n  },\n\n  createPackage(payload) {\n    return this.post('packages', payload);\n  },\n\n  fetchPackages() {\n    return this.get('packages');\n  },\n\n  updatePackage(id, payload) {\n    return this.update('packages', payload, id);\n  },\n\n  createService(payload) {\n    return this.post('services', payload);\n  },\n\n  fetchServices() {\n    return this.get('services');\n  },\n\n  updateService(id, payload) {\n    return this.update('services', payload, id);\n  },\n\n  fetchReservations() {\n    return this.get('reservations');\n  },\n\n  updateReservation(id, payload) {\n    return this.update('reservations', payload, id);\n  },\n\n  // Utils\n  getDataType(type) {\n    switch (typeof type) {\n      case 'string':\n        return 'string';\n\n      case 'number':\n        return 'numeric';\n\n      case 'boolean':\n        return 'boolean';\n\n      default:\n        return 'string';\n    }\n  },\n\n  handleError({\n    error\n  }) {},\n\n  handleSuccess({\n    success\n  }) {}\n\n};\nexport default API;","map":{"version":3,"sources":["/app/utils/api.js"],"names":["axios","Cookies","_","API_BASE_URL","process","env","API","token","get","resource","config","method","url","headers","Authorization","post","payload","data","update","id","getTableData","headersArray","then","response","map","header","field","title","startCase","toUpperCase","type","getDataType","resolve","columns","catch","e","reject","authenticate","email","password","logout","checkAuth","connectGoogleAccount","forgotPassword","resetPassword","createUser","name","initDashboard","fetchProfile","updateUser","updateAccount","createPackage","fetchPackages","updatePackage","createService","fetchServices","updateService","fetchReservations","updateReservation","handleError","error","handleSuccess","success"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport Cookies from 'js-cookie'\nimport _ from 'lodash'\n\nconst { API_BASE_URL } = process.env\n\nconst API = {\n  token() {\n    return Cookies.get('token')\n  },\n  get(resource, config = {}) {\n    return axios({\n      ...{\n        method: 'get',\n        url: `${API_BASE_URL}/${resource}`,\n        headers: {\n          Authorization: `JWT ${this.token()}`,\n          'Content-Type': 'application/json',\n        },\n      },\n      ...config,\n    })\n  },\n  post(resource, payload, config = {}) {\n    return axios({\n      ...{\n        method: 'post',\n        url: `${API_BASE_URL}/${resource}`,\n        headers: {\n          Authorization: `JWT ${this.token()}`,\n          'Content-Type': 'application/json',\n        },\n        data: payload,\n      },\n      ...config,\n    })\n  },\n  update(resource, payload, id, config = {}) {\n    return axios({\n      ...{\n        method: 'put',\n        url: `${API_BASE_URL}/${resource}/${id}`,\n        headers: {\n          Authorization: `JWT ${this.token()}`,\n          'Content-Type': 'application/json',\n        },\n        data: payload,\n      },\n      ...config,\n    })\n  },\n  getTableData(resource, headersArray) {\n    return this.get(resource)\n      .then(response => {\n        const { data } = response\n        let headers = headersArray || Object.keys(data[0])\n\n        headers = headers.map(header => ({\n          field: header,\n          title: _.startCase(header.toUpperCase()),\n          type: this.getDataType(data[0][header]),\n        }))\n\n        return new Promise(resolve =>\n          resolve({\n            columns: data,\n            headers,\n          })\n        )\n      })\n      .catch(e => new Promise((resolve, reject) => reject('Something went wrong')))\n  },\n  authenticate({ email, password }) {\n    return this.post('auth', { email, password })\n  },\n  logout() {\n    return this.get('auth/logout')\n  },\n  checkAuth() {\n    return this.get('auth/check-auth')\n  },\n  connectGoogleAccount(payload) {\n    return this.post('oauth/google/connect', payload)\n  },\n  forgotPassword(payload) {\n    return this.post('auth/forgot-password', payload)\n  },\n  resetPassword(payload) {\n    return this.post('auth/reset-password', payload)\n  },\n  createUser({ email, password, name }) {\n    return this.post('user', { email, password, name })\n  },\n  initDashboard() {\n    return this.get('dashboard')\n  },\n  fetchProfile() {\n    return this.get('dashboard/me')\n  },\n  updateUser(id, payload) {\n    return this.update('user', payload, id)\n  },\n  updateAccount(id, payload) {\n    return this.update('account', payload, id)\n  },\n  createPackage(payload) {\n    return this.post('packages', payload)\n  },\n  fetchPackages() {\n    return this.get('packages')\n  },\n  updatePackage(id, payload) {\n    return this.update('packages', payload, id)\n  },\n  createService(payload) {\n    return this.post('services', payload)\n  },\n  fetchServices() {\n    return this.get('services')\n  },\n  updateService(id, payload) {\n    return this.update('services', payload, id)\n  },\n  fetchReservations() {\n    return this.get('reservations')\n  },\n  updateReservation(id, payload) {\n    return this.update('reservations', payload, id)\n  },\n  // Utils\n  getDataType(type) {\n    switch (typeof type) {\n      case 'string':\n        return 'string'\n      case 'number':\n        return 'numeric'\n      case 'boolean':\n        return 'boolean'\n      default:\n        return 'string'\n    }\n  },\n  handleError({ error }) {},\n  handleSuccess({ success }) {},\n}\n\nexport default API\n"]},"metadata":{},"sourceType":"module"}