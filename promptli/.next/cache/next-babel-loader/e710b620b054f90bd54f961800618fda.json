{"ast":null,"code":"import Router from 'next/router';\nimport { loginActionTypes } from '../constants/index';\nimport API from '../utils/api';\nimport Cookies from 'js-cookie';\nimport { dashboardActions } from './index';\nconst loginActions = {\n  loginRequest: () => {\n    return {\n      type: loginActionTypes.LOGIN_REQUEST\n    };\n  },\n\n  makeLoginRequest(payload) {\n    return async dispatch => {\n      dispatch(this.loginRequest());\n      return API.authenticate(payload).then(response => {\n        const {\n          data\n        } = response;\n        Router.push('/dashboard');\n        Cookies.set('token', data.token, {\n          expires: 7\n        });\n        dispatch(this.loginSuccess(data));\n        dispatch(dashboardActions.initDashboard());\n      }).catch(e => dispatch(this.handleError(loginActionTypes.LOGIN_FAILURE, 'Invalid username or password')));\n    };\n  },\n\n  loginSuccess(payload) {\n    return {\n      type: loginActionTypes.LOGIN_SUCCESS,\n      payload\n    };\n  },\n\n  logoutRequest() {\n    return {\n      type: loginActionTypes.LOGOUT_REQUEST\n    };\n  },\n\n  makeLogoutRequest() {\n    return dispatch => {\n      dispatch(this.logoutRequest());\n      return API.logout().then(() => {\n        Cookies.remove('token');\n        Router.push('/login');\n        return dispatch(this.handleSuccess(loginActionTypes.LOGOUT_SUCCESS));\n      }).catch(e => dispatch(this.handleError(loginActionTypes.LOGIN_FAILURE)));\n    };\n  },\n\n  checkAuth() {\n    return {\n      type: loginActionTypes.CHECK_AUTH\n    };\n  },\n\n  checkAuthRequest() {\n    return dispatch => {\n      dispatch(this.checkAuth());\n      return API.checkAuth().then(({\n        data\n      }) => {\n        Cookies.set('token', data.token);\n        dispatch(this.handleSuccess(loginActionTypes.AUTH_SUCCESS, data));\n        return Router.push('/dashboard');\n      }).catch(e => {\n        return dispatch(this.handleError(loginActionTypes.AUTH_FAILURE));\n      });\n    };\n  },\n\n  createUser() {\n    return {\n      type: loginActionTypes.CREATE_USER_REQUEST\n    };\n  },\n\n  createUserRequest(payload) {\n    return async dispatch => {\n      dispatch(this.createUser());\n      API.createUser(payload).then(({\n        data\n      }) => {\n        Cookies.set('token', data.token);\n        dispatch(this.handleSuccess(loginActionTypes.CREATE_USER_SUCCESS));\n        dispatch(this.checkAuthRequest());\n        return dispatch(this.loginSuccess({\n          auth: data\n        }));\n      }).catch(e => dispatch(this.handleError(loginActionTypes.CREATE_USER_FAILURE)));\n    };\n  },\n\n  handleError(type, payload) {\n    return {\n      type,\n      payload\n    };\n  },\n\n  handleSuccess(type, payload) {\n    return {\n      type,\n      payload\n    };\n  },\n\n  resetPassword() {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_REQUEST\n    };\n  },\n\n  resetPasswordRequest(payload) {\n    this.resetPassword();\n    return dispatch => {\n      API.resetPassword(payload).then(({\n        data\n      }) => {\n        Cookies.set('token', data.token);\n        dispatch(this.checkAuthRequest());\n        return dispatch(this.resetPasswordSuccess(data));\n      }).catch(e => this.resetPasswordFailure(e));\n    };\n  },\n\n  resetPasswordSuccess(payload) {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n      payload\n    };\n  },\n\n  resetPasswordFailure(payload) {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n      payload\n    };\n  },\n\n  forgotPassword() {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_REQUEST\n    };\n  },\n\n  forgotPasswordRequest(payload) {\n    return dispatch => {\n      this.forgotPassword();\n      return API.forgotPassword(payload).then(({\n        data\n      }) => {\n        return dispatch(this.forgotPasswordSuccess(data));\n      }).catch(e => this.forgotPasswordFailure(e));\n    };\n  },\n\n  forgotPasswordSuccess(payload) {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_SUCCESS,\n      payload\n    };\n  },\n\n  forgotPasswordFailure(payload) {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_FAILURE,\n      payload\n    };\n  }\n\n};\nexport default loginActions;","map":{"version":3,"sources":["/app/actions/login.js"],"names":["Router","loginActionTypes","API","Cookies","dashboardActions","loginActions","loginRequest","type","LOGIN_REQUEST","makeLoginRequest","payload","dispatch","authenticate","then","response","data","push","set","token","expires","loginSuccess","initDashboard","catch","e","handleError","LOGIN_FAILURE","LOGIN_SUCCESS","logoutRequest","LOGOUT_REQUEST","makeLogoutRequest","logout","remove","handleSuccess","LOGOUT_SUCCESS","checkAuth","CHECK_AUTH","checkAuthRequest","AUTH_SUCCESS","AUTH_FAILURE","createUser","CREATE_USER_REQUEST","createUserRequest","CREATE_USER_SUCCESS","auth","CREATE_USER_FAILURE","resetPassword","RESET_PASSWORD_REQUEST","resetPasswordRequest","resetPasswordSuccess","resetPasswordFailure","RESET_PASSWORD_SUCCESS","forgotPassword","FORGOT_PASSWORD_REQUEST","forgotPasswordRequest","forgotPasswordSuccess","forgotPasswordFailure","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAILURE"],"mappings":"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","sourcesContent":["import Router from 'next/router'\nimport { loginActionTypes } from '../constants/index'\nimport API from '../utils/api'\nimport Cookies from 'js-cookie'\nimport { dashboardActions } from './index'\n\nconst loginActions = {\n    loginRequest: () => {\n        return { type: loginActionTypes.LOGIN_REQUEST }\n    },\n    makeLoginRequest(payload) {\n        return async dispatch => {\n            dispatch(this.loginRequest())\n            return API.authenticate(payload)\n                .then(response => {\n                    const { data } = response\n                    Router.push('/dashboard')\n                    Cookies.set('token', data.token, { expires: 7 })\n                    dispatch(this.loginSuccess(data))\n                    dispatch(dashboardActions.initDashboard())\n                })\n                .catch(e =>\n                    dispatch(\n                        this.handleError(\n                            loginActionTypes.LOGIN_FAILURE,\n                            'Invalid username or password'\n                        )\n                    )\n                )\n        }\n    },\n    loginSuccess(payload) {\n        return {\n            type: loginActionTypes.LOGIN_SUCCESS,\n            payload,\n        }\n    },\n    logoutRequest() {\n        return {\n            type: loginActionTypes.LOGOUT_REQUEST,\n        }\n    },\n    makeLogoutRequest() {\n        return dispatch => {\n            dispatch(this.logoutRequest())\n            return API.logout()\n                .then(() => {\n                    Cookies.remove('token')\n                    Router.push('/login')\n                    return dispatch(\n                        this.handleSuccess(loginActionTypes.LOGOUT_SUCCESS)\n                    )\n                })\n                .catch(e =>\n                    dispatch(this.handleError(loginActionTypes.LOGIN_FAILURE))\n                )\n        }\n    },\n    checkAuth() {\n        return {\n            type: loginActionTypes.CHECK_AUTH,\n        }\n    },\n    checkAuthRequest() {\n        return dispatch => {\n            dispatch(this.checkAuth())\n            return API.checkAuth()\n                .then(({ data }) => {\n                    Cookies.set('token', data.token)\n                    dispatch(\n                        this.handleSuccess(loginActionTypes.AUTH_SUCCESS, data)\n                    )\n                    return Router.push('/dashboard')\n                })\n                .catch(e => {\n                    return dispatch(\n                        this.handleError(loginActionTypes.AUTH_FAILURE)\n                    )\n                })\n        }\n    },\n    createUser() {\n        return {\n            type: loginActionTypes.CREATE_USER_REQUEST,\n        }\n    },\n    createUserRequest(payload) {\n        return async dispatch => {\n            dispatch(this.createUser())\n            API.createUser(payload)\n                .then(({ data }) => {\n                    Cookies.set('token', data.token)\n                    dispatch(\n                        this.handleSuccess(loginActionTypes.CREATE_USER_SUCCESS)\n                    )\n                    dispatch(this.checkAuthRequest())\n                    return dispatch(this.loginSuccess({ auth: data }))\n                })\n                .catch(e =>\n                    dispatch(\n                        this.handleError(loginActionTypes.CREATE_USER_FAILURE)\n                    )\n                )\n        }\n    },\n    handleError(type, payload) {\n        return {\n            type,\n            payload,\n        }\n    },\n    handleSuccess(type, payload) {\n        return {\n            type,\n            payload,\n        }\n    },\n    resetPassword() {\n        return {\n            type: loginActionTypes.RESET_PASSWORD_REQUEST,\n        }\n    },\n    resetPasswordRequest(payload) {\n        this.resetPassword()\n        return dispatch => {\n            API.resetPassword(payload)\n                .then(({ data }) => {\n                    Cookies.set('token', data.token)\n                    dispatch(this.checkAuthRequest())\n                    return dispatch(this.resetPasswordSuccess(data))\n                })\n                .catch(e => this.resetPasswordFailure(e))\n        }\n    },\n    resetPasswordSuccess(payload) {\n        return {\n            type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n            payload,\n        }\n    },\n    resetPasswordFailure(payload) {\n        return {\n            type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n            payload,\n        }\n    },\n    forgotPassword() {\n        return {\n            type: loginActionTypes.FORGOT_PASSWORD_REQUEST,\n        }\n    },\n    forgotPasswordRequest(payload) {\n        return dispatch => {\n            this.forgotPassword()\n            return API.forgotPassword(payload)\n                .then(({ data }) => {\n                    return dispatch(this.forgotPasswordSuccess(data))\n                })\n                .catch(e => this.forgotPasswordFailure(e))\n        }\n    },\n    forgotPasswordSuccess(payload) {\n        return {\n            type: loginActionTypes.FORGOT_PASSWORD_SUCCESS,\n            payload,\n        }\n    },\n    forgotPasswordFailure(payload) {\n        return {\n            type: loginActionTypes.FORGOT_PASSWORD_FAILURE,\n            payload,\n        }\n    },\n}\n\nexport default loginActions\n"]},"metadata":{},"sourceType":"module"}