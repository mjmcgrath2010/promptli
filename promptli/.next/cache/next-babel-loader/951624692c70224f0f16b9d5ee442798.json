{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Router from 'next/router';\nimport { loginActionTypes } from '../constants/index';\nimport API from '../utils/api';\nimport Cookies from 'js-cookie';\nimport { dashboardActions } from './index';\nvar loginActions = {\n  loginRequest: function loginRequest() {\n    return {\n      type: loginActionTypes.LOGIN_REQUEST\n    };\n  },\n  makeLoginRequest: function makeLoginRequest(payload) {\n    var _this = this;\n\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(dispatch) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatch(_this.loginRequest());\n                  return _context.abrupt(\"return\", API.authenticate(payload).then(function (response) {\n                    var data = response.data;\n                    Router.push('/dashboard');\n                    Cookies.set('token', data.token, {\n                      expires: 7\n                    });\n                    dispatch(_this.loginSuccess(data));\n                    dispatch(dashboardActions.initDashboard());\n                  })[\"catch\"](function (e) {\n                    return dispatch(_this.handleError(loginActionTypes.LOGIN_FAILURE, 'Invalid username or password'));\n                  }));\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  },\n  loginSuccess: function loginSuccess(payload) {\n    return {\n      type: loginActionTypes.LOGIN_SUCCESS,\n      payload: payload\n    };\n  },\n  logoutRequest: function logoutRequest() {\n    return {\n      type: loginActionTypes.LOGOUT_REQUEST\n    };\n  },\n  makeLogoutRequest: function makeLogoutRequest() {\n    var _this2 = this;\n\n    return function (dispatch) {\n      dispatch(_this2.logoutRequest());\n      return API.logout().then(function () {\n        Cookies.remove('token');\n        Router.push('/login');\n        return dispatch(_this2.handleSuccess(loginActionTypes.LOGOUT_SUCCESS));\n      })[\"catch\"](function (e) {\n        return dispatch(_this2.handleError(loginActionTypes.LOGIN_FAILURE));\n      });\n    };\n  },\n  checkAuth: function checkAuth() {\n    return {\n      type: loginActionTypes.CHECK_AUTH\n    };\n  },\n  checkAuthRequest: function checkAuthRequest() {\n    var _this3 = this;\n\n    return function (dispatch) {\n      dispatch(_this3.checkAuth());\n      return API.checkAuth().then(function (_ref2) {\n        var data = _ref2.data;\n        Cookies.set('token', data.token);\n        dispatch(_this3.handleSuccess(loginActionTypes.AUTH_SUCCESS, data));\n        return Router.push('/dashboard');\n      })[\"catch\"](function (e) {\n        return dispatch(_this3.handleError(loginActionTypes.AUTH_FAILURE));\n      });\n    };\n  },\n  createUser: function createUser() {\n    return {\n      type: loginActionTypes.CREATE_USER_REQUEST\n    };\n  },\n  createUserRequest: function createUserRequest(payload) {\n    var _this4 = this;\n\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(dispatch) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  dispatch(_this4.createUser());\n                  API.createUser(payload).then(function (_ref4) {\n                    var data = _ref4.data;\n                    Cookies.set('token', data.token);\n                    dispatch(_this4.handleSuccess(loginActionTypes.CREATE_USER_SUCCESS));\n                    dispatch(_this4.checkAuthRequest());\n                    return dispatch(_this4.loginSuccess({\n                      auth: data\n                    }));\n                  })[\"catch\"](function (e) {\n                    return dispatch(_this4.handleError(loginActionTypes.CREATE_USER_FAILURE));\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }()\n    );\n  },\n  handleError: function handleError(type, payload) {\n    return {\n      type: type,\n      payload: payload\n    };\n  },\n  handleSuccess: function handleSuccess(type, payload) {\n    return {\n      type: type,\n      payload: payload\n    };\n  },\n  resetPassword: function resetPassword() {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_REQUEST\n    };\n  },\n  resetPasswordRequest: function resetPasswordRequest(payload) {\n    var _this5 = this;\n\n    this.resetPassword();\n    return function (dispatch) {\n      API.resetPassword(payload).then(function (_ref5) {\n        var data = _ref5.data;\n        Cookies.set('token', data.token);\n        dispatch(_this5.checkAuthRequest());\n        return dispatch(_this5.resetPasswordSuccess(data));\n      })[\"catch\"](function (e) {\n        return _this5.resetPasswordFailure(e);\n      });\n    };\n  },\n  resetPasswordSuccess: function resetPasswordSuccess(payload) {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n      payload: payload\n    };\n  },\n  resetPasswordFailure: function resetPasswordFailure(payload) {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n      payload: payload\n    };\n  },\n  forgotPassword: function forgotPassword() {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_REQUEST\n    };\n  },\n  forgotPasswordRequest: function forgotPasswordRequest(payload) {\n    var _this6 = this;\n\n    return function (dispatch) {\n      _this6.forgotPassword();\n\n      return API.forgotPassword(payload).then(function (_ref6) {\n        var data = _ref6.data;\n        return dispatch(_this6.forgotPasswordSuccess(data));\n      })[\"catch\"](function (e) {\n        return _this6.forgotPasswordFailure(e);\n      });\n    };\n  },\n  forgotPasswordSuccess: function forgotPasswordSuccess(payload) {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_SUCCESS,\n      payload: payload\n    };\n  },\n  forgotPasswordFailure: function forgotPasswordFailure(payload) {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_FAILURE,\n      payload: payload\n    };\n  }\n};\nexport default loginActions;","map":{"version":3,"sources":["/app/actions/login.js"],"names":["Router","loginActionTypes","API","Cookies","dashboardActions","loginActions","loginRequest","type","LOGIN_REQUEST","makeLoginRequest","payload","dispatch","authenticate","then","response","data","push","set","token","expires","loginSuccess","initDashboard","e","handleError","LOGIN_FAILURE","LOGIN_SUCCESS","logoutRequest","LOGOUT_REQUEST","makeLogoutRequest","logout","remove","handleSuccess","LOGOUT_SUCCESS","checkAuth","CHECK_AUTH","checkAuthRequest","AUTH_SUCCESS","AUTH_FAILURE","createUser","CREATE_USER_REQUEST","createUserRequest","CREATE_USER_SUCCESS","auth","CREATE_USER_FAILURE","resetPassword","RESET_PASSWORD_REQUEST","resetPasswordRequest","resetPasswordSuccess","resetPasswordFailure","RESET_PASSWORD_SUCCESS","forgotPassword","FORGOT_PASSWORD_REQUEST","forgotPasswordRequest","forgotPasswordSuccess","forgotPasswordFailure","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAILURE"],"mappings":"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","sourcesContent":["import Router from 'next/router'\nimport { loginActionTypes } from '../constants/index'\nimport API from '../utils/api'\nimport Cookies from 'js-cookie'\nimport { dashboardActions } from './index'\n\nconst loginActions = {\n    loginRequest: () => {\n        return { type: loginActionTypes.LOGIN_REQUEST }\n    },\n    makeLoginRequest(payload) {\n        return async dispatch => {\n            dispatch(this.loginRequest())\n            return API.authenticate(payload)\n                .then(response => {\n                    const { data } = response\n                    Router.push('/dashboard')\n                    Cookies.set('token', data.token, { expires: 7 })\n                    dispatch(this.loginSuccess(data))\n                    dispatch(dashboardActions.initDashboard())\n                })\n                .catch(e =>\n                    dispatch(\n                        this.handleError(\n                            loginActionTypes.LOGIN_FAILURE,\n                            'Invalid username or password'\n                        )\n                    )\n                )\n        }\n    },\n    loginSuccess(payload) {\n        return {\n            type: loginActionTypes.LOGIN_SUCCESS,\n            payload,\n        }\n    },\n    logoutRequest() {\n        return {\n            type: loginActionTypes.LOGOUT_REQUEST,\n        }\n    },\n    makeLogoutRequest() {\n        return dispatch => {\n            dispatch(this.logoutRequest())\n            return API.logout()\n                .then(() => {\n                    Cookies.remove('token')\n                    Router.push('/login')\n                    return dispatch(\n                        this.handleSuccess(loginActionTypes.LOGOUT_SUCCESS)\n                    )\n                })\n                .catch(e =>\n                    dispatch(this.handleError(loginActionTypes.LOGIN_FAILURE))\n                )\n        }\n    },\n    checkAuth() {\n        return {\n            type: loginActionTypes.CHECK_AUTH,\n        }\n    },\n    checkAuthRequest() {\n        return dispatch => {\n            dispatch(this.checkAuth())\n            return API.checkAuth()\n                .then(({ data }) => {\n                    Cookies.set('token', data.token)\n                    dispatch(\n                        this.handleSuccess(loginActionTypes.AUTH_SUCCESS, data)\n                    )\n                    return Router.push('/dashboard')\n                })\n                .catch(e => {\n                    return dispatch(\n                        this.handleError(loginActionTypes.AUTH_FAILURE)\n                    )\n                })\n        }\n    },\n    createUser() {\n        return {\n            type: loginActionTypes.CREATE_USER_REQUEST,\n        }\n    },\n    createUserRequest(payload) {\n        return async dispatch => {\n            dispatch(this.createUser())\n            API.createUser(payload)\n                .then(({ data }) => {\n                    Cookies.set('token', data.token)\n                    dispatch(\n                        this.handleSuccess(loginActionTypes.CREATE_USER_SUCCESS)\n                    )\n                    dispatch(this.checkAuthRequest())\n                    return dispatch(this.loginSuccess({ auth: data }))\n                })\n                .catch(e =>\n                    dispatch(\n                        this.handleError(loginActionTypes.CREATE_USER_FAILURE)\n                    )\n                )\n        }\n    },\n    handleError(type, payload) {\n        return {\n            type,\n            payload,\n        }\n    },\n    handleSuccess(type, payload) {\n        return {\n            type,\n            payload,\n        }\n    },\n    resetPassword() {\n        return {\n            type: loginActionTypes.RESET_PASSWORD_REQUEST,\n        }\n    },\n    resetPasswordRequest(payload) {\n        this.resetPassword()\n        return dispatch => {\n            API.resetPassword(payload)\n                .then(({ data }) => {\n                    Cookies.set('token', data.token)\n                    dispatch(this.checkAuthRequest())\n                    return dispatch(this.resetPasswordSuccess(data))\n                })\n                .catch(e => this.resetPasswordFailure(e))\n        }\n    },\n    resetPasswordSuccess(payload) {\n        return {\n            type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n            payload,\n        }\n    },\n    resetPasswordFailure(payload) {\n        return {\n            type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n            payload,\n        }\n    },\n    forgotPassword() {\n        return {\n            type: loginActionTypes.FORGOT_PASSWORD_REQUEST,\n        }\n    },\n    forgotPasswordRequest(payload) {\n        return dispatch => {\n            this.forgotPassword()\n            return API.forgotPassword(payload)\n                .then(({ data }) => {\n                    return dispatch(this.forgotPasswordSuccess(data))\n                })\n                .catch(e => this.forgotPasswordFailure(e))\n        }\n    },\n    forgotPasswordSuccess(payload) {\n        return {\n            type: loginActionTypes.FORGOT_PASSWORD_SUCCESS,\n            payload,\n        }\n    },\n    forgotPasswordFailure(payload) {\n        return {\n            type: loginActionTypes.FORGOT_PASSWORD_FAILURE,\n            payload,\n        }\n    },\n}\n\nexport default loginActions\n"]},"metadata":{},"sourceType":"module"}