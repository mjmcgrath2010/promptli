{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport _ from 'lodash';\nvar API_BASE_URL = process.env.API_BASE_URL;\nvar API = {\n  token: function token() {\n    return Cookies.get('token');\n  },\n  get: function get(resource) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return axios(_objectSpread({}, {\n      method: 'get',\n      url: \"\".concat(API_BASE_URL, \"/\").concat(resource),\n      headers: {\n        Authorization: \"JWT \".concat(this.token()),\n        'Content-Type': 'application/json'\n      }\n    }, config));\n  },\n  post: function post(resource, payload) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return axios(_objectSpread({}, {\n      method: 'post',\n      url: \"\".concat(API_BASE_URL, \"/\").concat(resource),\n      headers: {\n        Authorization: \"JWT \".concat(this.token()),\n        'Content-Type': 'application/json'\n      },\n      data: payload\n    }, config));\n  },\n  update: function update(resource, payload, id) {\n    var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    return axios(_objectSpread({}, {\n      method: 'put',\n      url: \"\".concat(API_BASE_URL, \"/\").concat(resource, \"/\").concat(id),\n      headers: {\n        Authorization: \"JWT \".concat(this.token()),\n        'Content-Type': 'application/json'\n      },\n      data: payload\n    }, config));\n  },\n  getTableData: function getTableData(resource, headersArray) {\n    var _this = this;\n\n    return this.get(resource).then(function (response) {\n      var data = response.data;\n\n      var headers = headersArray || _Object$keys(data[0]);\n\n      headers = headers.map(function (header) {\n        return {\n          field: header,\n          title: _.startCase(header.toUpperCase()),\n          type: _this.getDataType(data[0][header])\n        };\n      });\n      return new _Promise(function (resolve) {\n        return resolve({\n          columns: data,\n          headers: headers\n        });\n      });\n    })[\"catch\"](function (e) {\n      return new _Promise(function (resolve, reject) {\n        return reject('Something went wrong');\n      });\n    });\n  },\n  authenticate: function authenticate(_ref) {\n    var email = _ref.email,\n        password = _ref.password;\n    return this.post('auth', {\n      email: email,\n      password: password\n    });\n  },\n  logout: function logout() {\n    return this.get('auth/logout');\n  },\n  checkAuth: function checkAuth() {\n    return this.get('auth/check-auth');\n  },\n  connectGoogleAccount: function connectGoogleAccount(payload) {\n    return this.post('oauth/google/connect', payload);\n  },\n  forgotPassword: function forgotPassword(payload) {\n    return this.post('auth/forgot-password', payload);\n  },\n  resetPassword: function resetPassword(payload) {\n    return this.post('auth/reset-password', payload);\n  },\n  createUser: function createUser(_ref2) {\n    var email = _ref2.email,\n        password = _ref2.password,\n        name = _ref2.name;\n    return this.post('user', {\n      email: email,\n      password: password,\n      name: name\n    });\n  },\n  initDashboard: function initDashboard() {\n    return this.get('dashboard');\n  },\n  fetchProfile: function fetchProfile() {\n    return this.get('dashboard/me');\n  },\n  updateUser: function updateUser(id, payload) {\n    return this.update('user', payload, id);\n  },\n  updateAccount: function updateAccount(id, payload) {\n    return this.update('account', payload, id);\n  },\n  createPackage: function createPackage(payload) {\n    return this.post('packages', payload);\n  },\n  fetchPackages: function fetchPackages() {\n    return this.get('packages');\n  },\n  updatePackage: function updatePackage(id, payload) {\n    return this.update('packages', payload, id);\n  },\n  createService: function createService(payload) {\n    return this.post('services', payload);\n  },\n  fetchServices: function fetchServices() {\n    return this.get('services');\n  },\n  updateService: function updateService(id, payload) {\n    return this.update('services', payload, id);\n  },\n  fetchReservations: function fetchReservations() {\n    return this.get('reservations');\n  },\n  updateReservation: function updateReservation(id, payload) {\n    return this.update('reservations', payload, id);\n  },\n  // Utils\n  getDataType: function getDataType(type) {\n    switch (typeof type) {\n      case 'string':\n        return 'string';\n\n      case 'number':\n        return 'numeric';\n\n      case 'boolean':\n        return 'boolean';\n\n      default:\n        return 'string';\n    }\n  },\n  handleError: function handleError(_ref3) {\n    var error = _ref3.error;\n  },\n  handleSuccess: function handleSuccess(_ref4) {\n    var success = _ref4.success;\n  }\n};\nexport default API;","map":null,"metadata":{},"sourceType":"module"}