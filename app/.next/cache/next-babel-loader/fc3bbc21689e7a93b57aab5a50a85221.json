{"ast":null,"code":"import Router from 'next/router';\nimport { loginActionTypes } from '../constants/index';\nimport API from '../utils/api';\nimport Cookies from 'js-cookie';\nimport { dashboardActions } from './index';\nconst loginActions = {\n  loginRequest: () => {\n    return {\n      type: loginActionTypes.LOGIN_REQUEST\n    };\n  },\n\n  makeLoginRequest(payload) {\n    return async dispatch => {\n      dispatch(this.loginRequest());\n      return API.authenticate(payload).then(response => {\n        const {\n          data\n        } = response;\n        Router.push('/dashboard');\n        Cookies.set('token', data.token, {\n          expires: 7\n        });\n        dispatch(this.loginSuccess(data));\n        dispatch(dashboardActions.initDashboard());\n      }).catch(e => dispatch(this.handleError(loginActionTypes.LOGIN_FAILURE, 'Invalid username or password')));\n    };\n  },\n\n  loginSuccess(payload) {\n    return {\n      type: loginActionTypes.LOGIN_SUCCESS,\n      payload\n    };\n  },\n\n  logoutRequest() {\n    return {\n      type: loginActionTypes.LOGOUT_REQUEST\n    };\n  },\n\n  makeLogoutRequest() {\n    return dispatch => {\n      dispatch(this.logoutRequest());\n      return API.logout().then(() => {\n        Cookies.remove('token');\n        Router.push('/login');\n        return dispatch(this.handleSuccess(loginActionTypes.LOGOUT_SUCCESS));\n      }).catch(e => dispatch(this.handleError(loginActionTypes.LOGIN_FAILURE)));\n    };\n  },\n\n  checkAuth() {\n    return {\n      type: loginActionTypes.CHECK_AUTH\n    };\n  },\n\n  checkAuthRequest() {\n    return dispatch => {\n      dispatch(this.checkAuth());\n      return API.checkAuth().then(({\n        data\n      }) => {\n        Cookies.set('token', data.token);\n        dispatch(this.handleSuccess(loginActionTypes.AUTH_SUCCESS, data));\n        return Router.push('/dashboard');\n      }).catch(e => {\n        return dispatch(this.handleError(loginActionTypes.AUTH_FAILURE));\n      });\n    };\n  },\n\n  createUser() {\n    return {\n      type: loginActionTypes.CREATE_USER_REQUEST\n    };\n  },\n\n  createUserRequest(payload) {\n    return async dispatch => {\n      dispatch(this.createUser());\n      API.createUser(payload).then(({\n        data\n      }) => {\n        Cookies.set('token', data.token);\n        dispatch(this.handleSuccess(loginActionTypes.CREATE_USER_SUCCESS));\n        dispatch(this.checkAuthRequest());\n        return dispatch(this.loginSuccess({\n          auth: data\n        }));\n      }).catch(e => dispatch(this.handleError(loginActionTypes.CREATE_USER_FAILURE)));\n    };\n  },\n\n  handleError(type, payload) {\n    return {\n      type,\n      payload\n    };\n  },\n\n  handleSuccess(type, payload) {\n    return {\n      type,\n      payload\n    };\n  },\n\n  resetPassword() {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_REQUEST\n    };\n  },\n\n  resetPasswordRequest(payload) {\n    this.resetPassword();\n    return dispatch => {\n      API.resetPassword(payload).then(({\n        data\n      }) => {\n        Cookies.set('token', data.token);\n        dispatch(this.checkAuthRequest());\n        return dispatch(this.resetPasswordSuccess(data));\n      }).catch(e => this.resetPasswordFailure(e));\n    };\n  },\n\n  resetPasswordSuccess(payload) {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n      payload\n    };\n  },\n\n  resetPasswordFailure(payload) {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n      payload\n    };\n  },\n\n  forgotPassword() {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_REQUEST\n    };\n  },\n\n  forgotPasswordRequest(payload) {\n    return dispatch => {\n      this.forgotPassword();\n      return API.forgotPassword(payload).then(({\n        data\n      }) => {\n        return dispatch(this.forgotPasswordSuccess(data));\n      }).catch(e => this.forgotPasswordFailure(e));\n    };\n  },\n\n  forgotPasswordSuccess(payload) {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_SUCCESS,\n      payload\n    };\n  },\n\n  forgotPasswordFailure(payload) {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_FAILURE,\n      payload\n    };\n  }\n\n};\nexport default loginActions;","map":null,"metadata":{},"sourceType":"module"}