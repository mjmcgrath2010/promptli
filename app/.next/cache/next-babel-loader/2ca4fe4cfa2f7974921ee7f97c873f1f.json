{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport _ from 'lodash';\nconst {\n  API_BASE_URL\n} = process.env;\nconst API = {\n  token() {\n    return Cookies.get('token');\n  },\n\n  get(resource, config = {}) {\n    return axios(_objectSpread({}, {\n      method: 'get',\n      url: `${API_BASE_URL}/${resource}`,\n      headers: {\n        Authorization: `JWT ${this.token()}`,\n        'Content-Type': 'application/json'\n      }\n    }, config));\n  },\n\n  post(resource, payload, config = {}) {\n    return axios(_objectSpread({}, {\n      method: 'post',\n      url: `${API_BASE_URL}/${resource}`,\n      headers: {\n        Authorization: `JWT ${this.token()}`,\n        'Content-Type': 'application/json'\n      },\n      data: payload\n    }, config));\n  },\n\n  update(resource, payload, id, config = {}) {\n    return axios(_objectSpread({}, {\n      method: 'put',\n      url: `${API_BASE_URL}/${resource}/${id}`,\n      headers: {\n        Authorization: `JWT ${this.token()}`,\n        'Content-Type': 'application/json'\n      },\n      data: payload\n    }, config));\n  },\n\n  getTableData(resource, headersArray) {\n    return this.get(resource).then(response => {\n      const {\n        data\n      } = response;\n\n      let headers = headersArray || _Object$keys(data[0]);\n\n      headers = headers.map(header => ({\n        field: header,\n        title: _.startCase(header.toUpperCase()),\n        type: this.getDataType(data[0][header])\n      }));\n      return new _Promise(resolve => resolve({\n        columns: data,\n        headers\n      }));\n    }).catch(e => new _Promise((resolve, reject) => reject('Something went wrong')));\n  },\n\n  authenticate({\n    email,\n    password\n  }) {\n    return this.post('auth', {\n      email,\n      password\n    });\n  },\n\n  logout() {\n    return this.get('auth/logout');\n  },\n\n  checkAuth() {\n    return this.get('auth/check-auth');\n  },\n\n  connectGoogleAccount(payload) {\n    return this.post('oauth/google/connect', payload);\n  },\n\n  forgotPassword(payload) {\n    return this.post('auth/forgot-password', payload);\n  },\n\n  resetPassword(payload) {\n    return this.post('auth/reset-password', payload);\n  },\n\n  createUser({\n    email,\n    password,\n    name\n  }) {\n    return this.post('user', {\n      email,\n      password,\n      name\n    });\n  },\n\n  initDashboard() {\n    return this.get('dashboard');\n  },\n\n  fetchProfile() {\n    return this.get('dashboard/me');\n  },\n\n  updateUser(id, payload) {\n    return this.update('user', payload, id);\n  },\n\n  updateAccount(id, payload) {\n    return this.update('account', payload, id);\n  },\n\n  createPackage(payload) {\n    return this.post('packages', payload);\n  },\n\n  fetchPackages() {\n    return this.get('packages');\n  },\n\n  updatePackage(id, payload) {\n    return this.update('packages', payload, id);\n  },\n\n  createService(payload) {\n    return this.post('services', payload);\n  },\n\n  fetchServices() {\n    return this.get('services');\n  },\n\n  updateService(id, payload) {\n    return this.update('services', payload, id);\n  },\n\n  fetchReservations() {\n    return this.get('reservations');\n  },\n\n  updateReservation(id, payload) {\n    return this.update('reservations', payload, id);\n  },\n\n  // Utils\n  getDataType(type) {\n    switch (typeof type) {\n      case 'string':\n        return 'string';\n\n      case 'number':\n        return 'numeric';\n\n      case 'boolean':\n        return 'boolean';\n\n      default:\n        return 'string';\n    }\n  },\n\n  handleError({\n    error\n  }) {},\n\n  handleSuccess({\n    success\n  }) {}\n\n};\nexport default API;","map":null,"metadata":{},"sourceType":"module"}