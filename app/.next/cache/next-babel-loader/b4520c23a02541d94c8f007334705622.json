{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport API from '../../utils/api';\nconst tableIcons = {\n  Add: forwardRef((props, ref) => __jsx(AddBox, _extends({}, props, {\n    ref: ref\n  }))),\n  Check: forwardRef((props, ref) => __jsx(Check, _extends({}, props, {\n    ref: ref\n  }))),\n  Clear: forwardRef((props, ref) => __jsx(Clear, _extends({}, props, {\n    ref: ref\n  }))),\n  Delete: forwardRef((props, ref) => __jsx(DeleteOutline, _extends({}, props, {\n    ref: ref\n  }))),\n  DetailPanel: forwardRef((props, ref) => __jsx(ChevronRight, _extends({}, props, {\n    ref: ref\n  }))),\n  Edit: forwardRef((props, ref) => __jsx(Edit, _extends({}, props, {\n    ref: ref\n  }))),\n  Export: forwardRef((props, ref) => __jsx(SaveAlt, _extends({}, props, {\n    ref: ref\n  }))),\n  Filter: forwardRef((props, ref) => __jsx(FilterList, _extends({}, props, {\n    ref: ref\n  }))),\n  FirstPage: forwardRef((props, ref) => __jsx(FirstPage, _extends({}, props, {\n    ref: ref\n  }))),\n  LastPage: forwardRef((props, ref) => __jsx(LastPage, _extends({}, props, {\n    ref: ref\n  }))),\n  NextPage: forwardRef((props, ref) => __jsx(ChevronRight, _extends({}, props, {\n    ref: ref\n  }))),\n  PreviousPage: forwardRef((props, ref) => __jsx(ChevronLeft, _extends({}, props, {\n    ref: ref\n  }))),\n  ResetSearch: forwardRef((props, ref) => __jsx(Clear, _extends({}, props, {\n    ref: ref\n  }))),\n  Search: forwardRef((props, ref) => __jsx(Search, _extends({}, props, {\n    ref: ref\n  }))),\n  SortArrow: forwardRef((props, ref) => __jsx(ArrowUpward, _extends({}, props, {\n    ref: ref\n  }))),\n  ThirdStateCheck: forwardRef((props, ref) => __jsx(Remove, _extends({}, props, {\n    ref: ref\n  }))),\n  ViewColumn: forwardRef((props, ref) => __jsx(ViewColumn, _extends({}, props, {\n    ref: ref\n  })))\n};\n\nclass DataTable extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setTableData\", ({\n      columns = [],\n      headers = []\n    }) => {\n      this.setState({\n        columns,\n        headers\n      });\n    });\n\n    this.state = {\n      columns: [],\n      headers: []\n    };\n  }\n\n  componentDidMount() {\n    API.getTableData(this.props.resource, this.props.columnsHeaders).then(data => {\n      return this.setTableData(data);\n    });\n  }\n\n  render() {\n    const {\n      title\n    } = this.props;\n    const {\n      headers,\n      columns\n    } = this.state;\n    return __jsx(\"div\", {\n      style: {\n        maxWidth: '100%',\n        marginTop: '2em'\n      }\n    }, columns.length ? __jsx(MaterialTable, {\n      icons: tableIcons,\n      columns: headers,\n      data: columns,\n      title: title\n    }) : __jsx(\"h2\", null, \"No Resources found\"));\n  }\n\n}\n\n_defineProperty(DataTable, \"defaultProps\", {\n  title: '',\n  columnsHeaders: undefined,\n  resource: ''\n});\n\nexport default DataTable;","map":null,"metadata":{},"sourceType":"module"}