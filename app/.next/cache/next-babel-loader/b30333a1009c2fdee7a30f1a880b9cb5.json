{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Fragment, Component } from 'react';\nimport { connect } from 'react-redux';\nimport Form from '../common/Form';\nimport { dashboardActions } from '../../actions';\n\nclass CreateService extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getFormFields\", () => {\n      return [{\n        name: 'name',\n        label: 'Name',\n        value: this.state.name\n      }, {\n        name: 'description',\n        label: 'Description',\n        multiline: true,\n        value: this.state.description,\n        type: 'text'\n      }, {\n        name: 'packages',\n        label: 'Available Packages',\n        value: this.state.packages,\n        type: 'select',\n        values: [],\n        // TODO: Hook up to services\n        onChange: this.onSelectChange\n      }];\n    });\n\n    _defineProperty(this, \"onSubmit\", () => {\n      const {\n        accountId,\n        createService\n      } = this.props;\n      createService(_objectSpread({}, this.state, {\n        accountId\n      }));\n    });\n\n    _defineProperty(this, \"onChange\", ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      this.setState({\n        [name]: value\n      });\n    });\n\n    _defineProperty(this, \"onSelectChange\", val => {\n      console.log(val);\n    });\n\n    this.state = {\n      name: '',\n      description: '',\n      pricingUnits: {\n        fixed: undefined,\n        hourly: undefined,\n        deposit: undefined,\n        minimum: undefined\n      },\n      packages: []\n    };\n  }\n\n  render() {\n    return __jsx(Fragment, null, __jsx(Form, {\n      onSubmit: this.onSubmit,\n      submitBtnText: \"Create Service\",\n      fields: this.getFormFields(),\n      onChange: this.onChange\n    }));\n  }\n\n}\n\nCreateService.defaultProps = {\n  onSubmit: () => {}\n};\n\nconst mapStateToProps = state => {\n  return {\n    accountId: state.dashboard.accountId,\n    services: state.dashboard.services\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch: action => dispatch(action),\n    createService: payload => dispatch(dashboardActions.createServiceRequest(payload))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateService);","map":null,"metadata":{},"sourceType":"module"}