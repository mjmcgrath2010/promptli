{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Router from 'next/router';\nimport { loginActionTypes } from '../constants/index';\nimport API from '../utils/api';\nimport Cookies from 'js-cookie';\nimport { dashboardActions } from './index';\nvar loginActions = {\n  loginRequest: function loginRequest() {\n    return {\n      type: loginActionTypes.LOGIN_REQUEST\n    };\n  },\n  makeLoginRequest: function makeLoginRequest(payload) {\n    var _this = this;\n\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(dispatch) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatch(_this.loginRequest());\n                  return _context.abrupt(\"return\", API.authenticate(payload).then(function (response) {\n                    var data = response.data;\n                    Router.push('/dashboard');\n                    Cookies.set('token', data.token, {\n                      expires: 7\n                    });\n                    dispatch(_this.loginSuccess(data));\n                    dispatch(dashboardActions.initDashboard());\n                  })[\"catch\"](function (e) {\n                    return dispatch(_this.handleError(loginActionTypes.LOGIN_FAILURE, 'Invalid username or password'));\n                  }));\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  },\n  loginSuccess: function loginSuccess(payload) {\n    return {\n      type: loginActionTypes.LOGIN_SUCCESS,\n      payload: payload\n    };\n  },\n  logoutRequest: function logoutRequest() {\n    return {\n      type: loginActionTypes.LOGOUT_REQUEST\n    };\n  },\n  makeLogoutRequest: function makeLogoutRequest() {\n    var _this2 = this;\n\n    return function (dispatch) {\n      dispatch(_this2.logoutRequest());\n      return API.logout().then(function () {\n        Cookies.remove('token');\n        Router.push('/login');\n        return dispatch(_this2.handleSuccess(loginActionTypes.LOGOUT_SUCCESS));\n      })[\"catch\"](function (e) {\n        return dispatch(_this2.handleError(loginActionTypes.LOGIN_FAILURE));\n      });\n    };\n  },\n  checkAuth: function checkAuth() {\n    return {\n      type: loginActionTypes.CHECK_AUTH\n    };\n  },\n  checkAuthRequest: function checkAuthRequest() {\n    var _this3 = this;\n\n    return function (dispatch) {\n      dispatch(_this3.checkAuth());\n      return API.checkAuth().then(function (_ref2) {\n        var data = _ref2.data;\n        Cookies.set('token', data.token);\n        dispatch(_this3.handleSuccess(loginActionTypes.AUTH_SUCCESS, data));\n        return Router.push('/dashboard');\n      })[\"catch\"](function (e) {\n        return dispatch(_this3.handleError(loginActionTypes.AUTH_FAILURE));\n      });\n    };\n  },\n  createUser: function createUser() {\n    return {\n      type: loginActionTypes.CREATE_USER_REQUEST\n    };\n  },\n  createUserRequest: function createUserRequest(payload) {\n    var _this4 = this;\n\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(dispatch) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  dispatch(_this4.createUser());\n                  API.createUser(payload).then(function (_ref4) {\n                    var data = _ref4.data;\n                    Cookies.set('token', data.token);\n                    dispatch(_this4.handleSuccess(loginActionTypes.CREATE_USER_SUCCESS));\n                    dispatch(_this4.checkAuthRequest());\n                    return dispatch(_this4.loginSuccess({\n                      auth: data\n                    }));\n                  })[\"catch\"](function (e) {\n                    return dispatch(_this4.handleError(loginActionTypes.CREATE_USER_FAILURE));\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }()\n    );\n  },\n  handleError: function handleError(type, payload) {\n    return {\n      type: type,\n      payload: payload\n    };\n  },\n  handleSuccess: function handleSuccess(type, payload) {\n    return {\n      type: type,\n      payload: payload\n    };\n  },\n  resetPassword: function resetPassword() {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_REQUEST\n    };\n  },\n  resetPasswordRequest: function resetPasswordRequest(payload) {\n    var _this5 = this;\n\n    this.resetPassword();\n    return function (dispatch) {\n      API.resetPassword(payload).then(function (_ref5) {\n        var data = _ref5.data;\n        Cookies.set('token', data.token);\n        dispatch(_this5.checkAuthRequest());\n        return dispatch(_this5.resetPasswordSuccess(data));\n      })[\"catch\"](function (e) {\n        return _this5.resetPasswordFailure(e);\n      });\n    };\n  },\n  resetPasswordSuccess: function resetPasswordSuccess(payload) {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n      payload: payload\n    };\n  },\n  resetPasswordFailure: function resetPasswordFailure(payload) {\n    return {\n      type: loginActionTypes.RESET_PASSWORD_SUCCESS,\n      payload: payload\n    };\n  },\n  forgotPassword: function forgotPassword() {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_REQUEST\n    };\n  },\n  forgotPasswordRequest: function forgotPasswordRequest(payload) {\n    var _this6 = this;\n\n    return function (dispatch) {\n      _this6.forgotPassword();\n\n      return API.forgotPassword(payload).then(function (_ref6) {\n        var data = _ref6.data;\n        return dispatch(_this6.forgotPasswordSuccess(data));\n      })[\"catch\"](function (e) {\n        return _this6.forgotPasswordFailure(e);\n      });\n    };\n  },\n  forgotPasswordSuccess: function forgotPasswordSuccess(payload) {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_SUCCESS,\n      payload: payload\n    };\n  },\n  forgotPasswordFailure: function forgotPasswordFailure(payload) {\n    return {\n      type: loginActionTypes.FORGOT_PASSWORD_FAILURE,\n      payload: payload\n    };\n  }\n};\nexport default loginActions;","map":null,"metadata":{},"sourceType":"module"}