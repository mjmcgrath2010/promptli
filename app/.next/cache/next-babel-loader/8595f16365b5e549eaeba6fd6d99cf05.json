{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport CalendarTile from './CalendarTile';\nimport CommonButton from '../CommonButton';\nvar CalendarContainer = styled.div.withConfig({\n  displayName: \"Calendar__CalendarContainer\",\n  componentId: \"pwm3t8-0\"\n})([\"display:inline-flex;flex-direction:row;flex-wrap:wrap;justify-content:flex-start;width:100%;height:auto;flex:1;margin-bottom:24px;\"]);\nvar DayHeading = styled.div.withConfig({\n  displayName: \"Calendar__DayHeading\",\n  componentId: \"pwm3t8-1\"\n})([\"width:14%;font-size:14px;text-align:center;align-content:baseline;\"]);\nvar HeaderContainer = styled(CalendarContainer).withConfig({\n  displayName: \"Calendar__HeaderContainer\",\n  componentId: \"pwm3t8-2\"\n})([\"justify-content:space-evenly;margin-bottom:6px;\"]);\nvar HeaderItem = styled.div.withConfig({\n  displayName: \"Calendar__HeaderItem\",\n  componentId: \"pwm3t8-3\"\n})([\"width:33%;text-align:center;align-content:center;\"]);\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Calendar, _React$Component);\n\n  function Calendar(props) {\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calendar).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"lastMonth\", function () {\n      var lastMonth = _this.state.startDate.subtract(1, 'months');\n\n      _this.setState({\n        dates: _this.getDisplayDates(lastMonth),\n        startDate: lastMonth\n      }, function () {\n        _this.setState({\n          currentMonth: _this.state.dates[8].format('MMMM YYYY')\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"nextMonth\", function () {\n      var nextMonth = _this.state.startDate.add(1, 'months');\n\n      _this.setState({\n        dates: _this.getDisplayDates(nextMonth),\n        startDate: nextMonth\n      }, function () {\n        _this.setState({\n          currentMonth: _this.state.dates[8].format('MMMM YYYY')\n        });\n      });\n    });\n\n    _this.state = {\n      dates: [],\n      events: []\n    };\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initCalendar();\n    }\n  }, {\n    key: \"initCalendar\",\n    value: function initCalendar() {\n      this.renderInitialDates();\n    }\n  }, {\n    key: \"renderHeadings\",\n    value: function renderHeadings() {\n      var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      return days.map(function (day) {\n        return __jsx(DayHeading, {\n          key: day\n        }, day);\n      });\n    }\n  }, {\n    key: \"renderEvents\",\n    value: function renderEvents() {}\n  }, {\n    key: \"currentDate\",\n    value: function currentDate() {\n      return moment();\n    }\n  }, {\n    key: \"fetchBookings\",\n    value: function fetchBookings() {// TODO: Fetch Bookings\n    }\n  }, {\n    key: \"renderInitialDates\",\n    value: function renderInitialDates() {\n      var day = this.currentDate().format('DD');\n      var firstDayOfMonth = moment().subtract(day, 'days').add(1, 'day');\n      var startDateDay = firstDayOfMonth.day();\n      var endDate = moment().endOf('month');\n      var startDate;\n\n      if (startDateDay !== 0) {\n        startDate = firstDayOfMonth.subtract(startDateDay).add(1, 'day');\n      } else {\n        startDate = firstDayOfMonth;\n      }\n\n      this.setState({\n        dates: this.getDisplayDates(startDate),\n        currentMonth: this.currentDate().format('MMMM YYYY'),\n        startDate: startDate,\n        endDate: endDate\n      });\n    }\n  }, {\n    key: \"getDisplayDates\",\n    value: function getDisplayDates(date) {\n      var dates = [];\n      var startDate = moment(date);\n\n      if (startDate.day()) {\n        startDate = startDate.subtract(startDate.day(), 'days');\n      }\n\n      for (var i = 0; i <= 34; i++) {\n        var offSet = moment(startDate);\n        dates.push(offSet.add(i, 'days'));\n      }\n\n      return dates;\n    }\n  }, {\n    key: \"addEvent\",\n    value: function addEvent() {}\n  }, {\n    key: \"deleteEvent\",\n    value: function deleteEvent() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Fragment, null, __jsx(HeaderContainer, null, __jsx(HeaderItem, null, __jsx(CommonButton, {\n        text: \"Previous\",\n        onClick: this.lastMonth\n      })), __jsx(HeaderItem, null, __jsx(\"h2\", null, this.state.currentMonth)), __jsx(HeaderItem, null, __jsx(CommonButton, {\n        text: \"Next\",\n        onClick: this.nextMonth\n      }))), __jsx(CalendarContainer, null, this.renderHeadings(), this.state.dates.map(function (day) {\n        return __jsx(CalendarTile, null, day.format('DD'));\n      })));\n    }\n  }]);\n\n  return Calendar;\n}(React.Component);\n\nCalendar.defaultProps = {};\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}